/*
* Copyright (c) 2002 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description:  Localised strings for Series60 MIDP LCDUI
*
*/



// LOCALISATION STRINGS

// d:String representing the name of §key.scroll.up§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_up "Up"

// d:String representing the name of §key.scroll.down§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_down "Down"

// d:String representing the name of §key.scroll.left§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_left "Left"

// d:String representing the name of §key.scroll.right§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_right "Right"

// d:String representing the name of §gen.selection.key§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_select "Select"

// d:String representing the name of §key.clear§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_clear "Clear"

// d:String representing the name of §key.edit§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_edit "Edit"

// d:String representing the name of §key.send§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_send "Send"

// d:String representing the name of §key.left.softkey§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_lsk "Left softkey"

// d:String representing the name of §key.right.softkey§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_rsk "Right softkey"

// d:String representing the name of §key.end§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_end "End"

// d:String representing the name of §key.apps§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_apps "Applications"

// d:String representing the name of §key.voice§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_voice "Voice"

// d:String representing the Play media key.
// d:Pressing Play key starts a media player
// d:e.g. a music player.
// d:The same key is used for Pause.
// l:None
//
#define qtn_midp_key_play "Play"

// d:String representing the Previous/Rewind media key.
// d:Pressing Previous/Rewind key rewinds a media player
// d:e.g. a music player.
// l:None
//
#define qtn_midp_key_previous "Previous"

// d:String representing the Next/Forward media key.
// d:Pressing Next/Forward key forwards a media player
// d:e.g. a music player.
// l:None
//
#define qtn_midp_key_next "Next"

// d:String representing the Stop media key.
// d:Pressing Stop key stops a media player
// d:e.g. a music player.
// l:None
//
#define qtn_midp_key_stop "Stop"

// d:String representing the Zoom in key.
// l:None
//
#define qtn_midp_key_zoom_in "Zoom in"

// d:String representing the Zoom out key.
// l:None
//
#define qtn_midp_key_zoom_out "Zoom out"

// d:String representing the name of §key.clockwise.rotate§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_clockwise_rotate "#Clock-wise rotate"

// d:String representing the name of §key.counterclockwise.rotate§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_counter_clockwise_rotate "#Counter-clock-wise rotate"

// d:String representing the name of §key.clockwise.fast.rotate§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_clockwise_fast_rotate "#Clock-wise fast rotate"

// d:String representing the name of §key.counterclockwise.fast.rotate§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_counter_clockwise_fast_rotate "#Counter-clock-wise fast rotate"

// d:String representing the name of §key.space§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_space "Space"

// d:String representing the name of §key.backspace§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_backspace "Backspace"

// d:String representing the name of §key.esc§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_esc "Esc"

// d:String representing the name of §key.tab§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_tab "Tab"

// d:String representing the name of §key.enter§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_enter "Enter"

// d:String representing the name of §key.delete§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_delete "Delete"

// d:String representing the name of §key.form.feed§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_form_feed "Form feed"

// d:String representing the name of §key.vertical.tab§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_vertical_tab "Vertical tab"

// d:String representing the name of §key.line.feed§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_line_feed "Line feed"

// d:String representing the name of §key.bell§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_bell "Bell"

// d:String representing the name of §key.non.character§
// d:If possible, the string must be identical to the symbol
// d:printed on the physical key on the device keypad.
// l:None
//
#define qtn_midp_key_non_character "Non-unicode - this should be mapped on real device"


// d:default text for Error Alert (Implemented as Error Note)
// d:when no text is specified by the MIDlet
// l:popup_note_window
//
#define qtn_midp_alert_error "Error"

// d:default text for Warning Alert (Implemented as Warning Note)
// d:when no text is specified by the MIDlet
// l:popup_note_window
//
#define qtn_midp_alert_warning "Warning"

// d:default text for Information Alert (Implemented as Information Note)
// d:when no text is specified by the MIDlet
// l:popup_note_window
//
#define qtn_midp_alert_info "Information"

// d:default text for Confirmation Alert (Implemented as Confirmation Note)
// d:when no text is specified by the MIDlet
// l:popup_note_window
//
#define qtn_midp_alert_conf "OK"

// d:default text for Alarm Alert (Implemented as Information Note)
// d:when no text is specified by the MIDlet
// l:popup_note_window
//
#define qtn_midp_alert_alarm "Alarm"

// d:default text for Null Alert (Implemented as Note with no icon & no tone)
// d:when no text is specified by the MIDlet
// l:popup_note_window
//
#define qtn_midp_alert_null "Alert"

// d:Options menu command for a TextBox/TextField: fetch a phone number
// d:from Contacts; after fetching the number, it is set as the content 
// d:of the TextBox/TextField.
// l:list_single_pane_t1_cp2
//
#define qtn_midp_option_pb_fetch_number "Fetch number"

// d:Left soft key command for a TextBox/TextField: fetch a phone number
// d:from Contacts; after fetching the number, it is set as the content 
// d:of the TextBox/TextField.
// l:control_pane_t1/opt7
//
#define qtn_midp_option_pb_fetch_number_short "Fetch"

// d:Options menu command for a TextBox/TextField: fetch a email address
// d:from Contacts; after fetching the address, it is set as the content 
// d:of the TextBox/TextField.
// l:list_single_pane_t1_cp2
//
#define qtn_midp_option_pb_fetch_email "Fetch email address"

// d:Left soft key command for a TextBox/TextField: fetch a email address
// d:from Contacts; after fetching the address, it is set as the content 
// d:of the TextBox/TextField.
// l:control_pane_t1/opt7
//
#define qtn_midp_option_pb_fetch_email_short "Fetch"

// d:Options menu command for a TextBox/TextField: call the number that 
// d:is currently entered in the TextBox/TextField.
// l:list_single_pane_t1_cp2
//
#define qtn_midp_option_create_call "Call"

// d:Left soft key command for a TextBox/TextField: call the number that 
// d:is currently entered in the TextBox/TextField.
// l:control_pane_t1/opt7
//
#define qtn_midp_option_create_call_short "Call"

// d:Information note shown when the maximum capacity of a TexBox or TextField
// d:and the user tries to enter more characters.
// l:popup_note_window
//
#define qtn_midp_text_maximum_reached "Maximum number of characters reached"

// d:Information note shown if the user tries to edit the text in a 
// d:TexBox or TextField which is uneditable.
// l:popup_note_window
//
#define qtn_midp_text_uneditable "Text is not editable"

// d:Confirmation query prompt.
// d:Does the user really want to call the number in a TextBox/TextField?
// d:Shown after the Send key has been pressed or "Call" selected from menu.
// d:%U represents the number to be called.
// l:popup_note_window
//
#define qtn_midp_quest_call_number "Call number?\n%U"


// The following strings might be needed in the future.

// d:Options menu command for a TextBox/TextField: send email to
// the address that is currently entered in the TextBox/TextField.
// l:list_single_popup_menu_pane_1
//
//#define qtn_midp_option_send_email "Send email"

// d:Options menu command for a TextBox/TextField: activate browser with 
// d:the URL thta is currently entered in the TextBox/TextField.
// l:list_single_popup_menu_pane_1
//
//#define qtn_midp_option_activate_browser "Browse"

// End of File
